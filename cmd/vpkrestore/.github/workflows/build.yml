# Build an executable for Linux, Windows, and macOS.
# Upload the executables as artifacts.
# Upload the executables as GitHub Releases.

name: Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.21.3
        uses: actions/setup-go@v2
        with:
          go-version: 1.21.3
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure -v -vendor-only
          fi

      - name: Build
        run: |
          mkdir -p build
          GOOS=linux GOARCH=amd64 go build -o build/vpkrestore-linux-amd64
          GOOS=windows GOARCH=amd64 go build -o build/vpkrestore-windows-amd64.exe
          GOOS=darwin GOARCH=amd64 go build -o build/vpkrestore-darwin-amd64

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: vpkrestore
          path: build

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/vpkrestore-linux-amd64
          asset_name: vpkrestore-linux-amd64
          asset_content_type: application/octet-stream